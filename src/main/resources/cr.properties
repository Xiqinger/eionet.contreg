# indicates the current version of Content Registry
application.version=3.0

# the User-Agent to expose when doing web crawling
application.userAgent=Content Registry/{0}

# indicates if this is production environment (there might be some extra functions in UI in non-production environment)
environment.production=false

# properties for simple database access (i.e. for connection that should
# not be taken from Tomcat's database connection pool)
db.drv=${db.drv}
db.url=${db.host}
db.usr=${db.usr}
db.pwd=${db.pwd}

# database connection to be used by unit tests
db.unitest.drv=${db.unitest.drv}
db.unitest.url=${db.unitest.url}
db.unitest.usr=${db.unitest.usr}
db.unitest.pwd=${db.unitest.pwd}

# location of the folder where harvester collects its temporary files
harvester.tempFileDir=${harvester.tempFileDir}

# the clock hours (0-23) when batch harvesting should be active, given as comma separated from-to spans (e.g 10-15, 19-23),
# where in every span both from and to are inclusive and there must be from<=to (so, to say from 18.00 to 9.00 you must write 18-23,0-8)
# (leave completely empty to disable any batch harvesting)
harvester.batchHarvestingHours=${harvester.batchHarvestingHours}

# interval (in seconds) at which CR checks for new urgent or scheduled harvests
harvester.batchHarvestingIntervalSeconds=${harvester.batchHarvestingIntervalSeconds}

# default harvesting interval (in minutes) for new auto-detected harvest sources
harvester.referrals.intervalMinutes=${harvester.referrals.intervalMinutes}

# properties for CR CAS filter configuration
edu.yale.its.tp.cas.client.filter.loginUrl=https://sso.eionet.europa.eu/login
edu.yale.its.tp.cas.client.filter.validateUrl=https://sso.eionet.europa.eu/serviceValidate
edu.yale.its.tp.cas.client.filter.serverName=${edu.yale.its.tp.cas.client.filter.serverName}
edu.yale.its.tp.cas.client.filter.wrapRequest=true

# XmlConv's URL where CR can get the list of conversion for a given schema
xmlconv.listConversions.url=http://converters.eionet.europa.eu/api/listConversions?schema={0}

# The GET request that does the XML-to-RDF conversion
xmlconv.convert.url=http://converters.eionet.europa.eu/api/convert?convert_id={0}&url={1}

# The POST request that does the XML-to-RDF conversion
xmlconv.convertPush.url=http://converters.eionet.europa.eu/api/convertPush

# XmlConv's URL where CR can get a particular conversion's XSL by replacing {0} with the XSL file name
# it receives from xmlconv.listConversions.url in the first place.
xmlconv.xsl.url=http://converters.eionet.europa.eu/xsl/{0}

# Standard JavaMail (http://java.sun.com/products/javamail) properties that CR
# should use for sending error notification e-mails. For a complete reference see page 61 of
# http://java.sun.com/products/javamail/JavaMail-1.4.pdf.
# The mail.user and mail.password are not mandatory if the SMTP host does not require authentication.
# To turn off notifications, simply leave "mail.host" empty.
mail.transport.protocol=smtp
mail.store.protocol=smtp
mail.host=${mail.host}
mail.user=${mail.user}
mail.password=${mail.password}
mail.from=${mail.from}

# The comma-separated list of e-mail addresses of CR system administrators. Error
# notifications will be delivered to those addresses. This is NOT a standard JavaMail property!
mail.sysAdmins=${mail.sysAdmins}

# properties related to ObjectHashesFixer
ObjectHashesFixer.batchSize=1000
ObjectHashesFixer.noOfBatchesToRun=1

# Interval (ms) for updating the picklist in Delivery search.
dataflowPicklistCacheUpdateInterval=${dataflowPicklistCacheUpdateInterval}

# Interval (ms) for updating the cache of recently discovered files.
recentDiscoveredFilesCacheUpdateInterval=${recentDiscoveredFilesCacheUpdateInterval}

# Interval (ms) for updating the cache of distinct rdf:types in CR triple store.
typeCacheUpdateInterval=${typeCacheUpdateInterval}

# Interval (ms) for updating the tag cloud cache.
tagCloudCacheUpdateInterval=${tagCloudCacheUpdateInterval}

# Garbage collector cron schedule. For example "0 13 04 ? * *" means every day 4:13AM.
# If empty, no garbage collector is run. Garbage collector clears CR triple store from graph-less triples.
garbageCollectorCronJob=${garbageCollectorCronJob}

# Cron schedule for updating rdf:type cache tables in database - this may take more than 15 minutes!
typeCacheTablesUpdateCronJob=${typeCacheTablesUpdateCronJob}

# MS-Excel exporter row limit.
exporter.xls.row.limit=3000

# TagCloud length for front page and tag search.
tagcloud.frontpage.size=30
tagcloud.tagsearch.size=1000

# URL that serves as local Virtuoso SPARQL endpoint.
virtuoso.sparql.endpoint=http://localhost:8890/sparql

# Virtuoso db connection properties.
virtuoso.db.url=${virtuoso.db.url}
virtuoso.db.usr=${virtuoso.db.usr}
virtuoso.db.pwd=${virtuoso.db.pwd}
